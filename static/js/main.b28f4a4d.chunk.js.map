{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","App.tsx","api/user.ts","index.tsx"],"names":["PostsList","posts","setSelectedPost","selectedPostId","className","map","post","userId","title","id","type","onClick","BASE_URL","request","endpoint","option","method","fetch","then","response","ok","json","Error","catch","getPostComments","postId","NewCommentForm","commentId","setComments","useState","name","setName","email","setEmail","text","setText","onSubmit","event","comment","preventDefault","body","headers","JSON","stringify","placeholder","value","onChange","target","required","classNames","PostDetails","postDetails","setPostDetails","comments","isLoading","setIsLoading","isHiden","setIsHiden","useEffect","removeHandle","removeComment","length","CircularProgress","App","setPosts","users","setUsers","selectedUser","setSelectedUser","setSelectedPostId","getUserPosts","postsFromServer","console","log","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b28f4a4d.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../react-app-env';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[]\n  setSelectedPost: (post: number) => void\n  selectedPostId: number\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, setSelectedPost, selectedPostId }) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`[User #${post.userId}]:`}</b>\n              {post.title}\n            </div>\n            {post.id === selectedPostId ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setSelectedPost(0)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setSelectedPost(post.id)}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\ntype Option = {\n  method: string\n  headers?: {}\n  body?: string\n};\n\nexport const request = (endpoint: string, id: number | string = '', option: Option = { method: 'GET' }) => {\n  return fetch(`${BASE_URL}${endpoint}${id}`, option)\n    .then(response => {\n      if (!response.ok) {\n        return new Error(`${BASE_URL}${endpoint} ERROR 404`);\n      }\n\n      return response.json();\n    })\n    .catch(() => {});\n};\n","import { Comment } from '../react-app-env';\nimport { request } from './api';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request('/comments?postId=', postId);\n};\n\nexport const removeComment = (commentId: number) => {\n  return request('/comments/', commentId, { method: 'DELETE' });\n};\n\nexport const addComment = (comment: Comment) => {\n  return request('/comments', '', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { addComment, getPostComments } from '../../api/comments';\nimport { Comment } from '../../react-app-env';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n  commentId: number\n  setComments: (response: Comment[]) => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, commentId, setComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n\n  const handlerSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    addComment({\n      postId,\n      name,\n      email,\n      body: text,\n      id: commentId + 1,\n    }).then(() => getPostComments(postId).then(response => setComments(response)));\n    setName('');\n    setEmail('');\n    setText('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handlerSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={text}\n          onChange={(event) => setText(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className={classNames('NewCommentForm__submit-button', 'button')}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { CircularProgress } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Post, Comment } from '../../react-app-env';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isHiden, setIsHiden] = useState(false);\n  // const [commentsError, setCommentsError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(false);\n    getPostDetails(selectedPostId).then(response => {\n      setIsLoading(true);\n      setPostDetails(response);\n    });\n    if (selectedPostId !== 0) {\n      getPostComments(selectedPostId).then(setComments);\n    }\n  }, [selectedPostId]);\n\n  const removeHandle = (commentId: number) => {\n    removeComment(commentId)\n      .then(() => getPostComments(selectedPostId).then(setComments));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {isLoading ? (\n        <>\n          <section className=\"PostDetails__post\">\n            {postDetails && <p>{postDetails.body}</p>}\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {!!selectedPostId && !!comments?.length && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setIsHiden(!isHiden)}\n              >\n                {!isHiden ? `show ${comments.length} comments` : `hide ${comments.length} comments`}\n              </button>\n            )}\n\n            {isHiden && (\n              <ul className=\"PostDetails__list\">\n                {comments?.map((comment) => (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comment.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => removeHandle(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={selectedPostId}\n                commentId={comments[comments?.length - 1]?.id}\n                setComments={setComments}\n              />\n            </div>\n          </section>\n        </>\n      ) : (\n        <CircularProgress />\n      )}\n\n    </div>\n  );\n};\n","import { Post } from '../react-app-env';\nimport { request } from './api';\n\nexport const getUserPosts = (userId = 0): Promise<Post[]> => {\n  if (userId === 0) {\n    return request('/posts');\n  }\n\n  return request('/posts?userId=', userId);\n};\n\nexport const getPostDetails = (postId: number) => {\n  return request('/posts/', postId);\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { CircularProgress } from '@mui/material';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\nimport { getUsers } from './api/user';\nimport { Post, User } from './react-app-env';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    setIsLoading(false);\n    getUserPosts(selectedUser)\n      .then(postsFromServer => {\n        setIsLoading(true);\n        setPosts(postsFromServer);\n      });\n    // eslint-disable-next-line no-console\n    console.log(selectedUser);\n  }, [selectedUser]);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n    // .catch(() => (setErrorPostsList(true)));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => setSelectedUser(+event.target.value)}\n\n          >\n            <option value={0}>All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading ? (\n            <PostsList\n              posts={posts}\n              setSelectedPost={setSelectedPostId}\n              selectedPostId={selectedPostId}\n            />\n          ) : (\n            <CircularProgress />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {!!selectedPostId && (\n            <PostDetails selectedPostId={selectedPostId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { User } from '../react-app-env';\nimport { request } from './api';\n\nexport const getUsers = (): Promise<User[]> => {\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}